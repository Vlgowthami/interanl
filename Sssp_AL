import java.util.*;

public class Dijkstra {
    public static void dijkstra(int V, List<List<int[]>> adjList, int source) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        pq.add(new int[]{source, 0});

        while (!pq.isEmpty()) {
            int[] node = pq.poll();
            for (int[] edge : adjList.get(node[0])) {
                int v = edge[0], w = edge[1];
                if (dist[node[0]] + w < dist[v]) {
                    dist[v] = dist[node[0]] + w;
                    pq.add(new int[]{v, dist[v]});
                }
            }
        }

        for (int i = 0; i < V; i++)
            System.out.println("Node " + i + ": " + (dist[i] == Integer.MAX_VALUE ? "unreachable" : dist[i]));
    }

    public static void main(String[] args) {
        int V = 5;
        List<List<int[]>> adjList = new ArrayList<>();
        for (int i = 0; i < V; i++) adjList.add(new ArrayList<>());
        
        adjList.get(0).add(new int[]{1, 10});
        adjList.get(0).add(new int[]{4, 5});
        adjList.get(1).add(new int[]{2, 1});
        adjList.get(1).add(new int[]{4, 2});
        adjList.get(2).add(new int[]{3, 4});
        adjList.get(3).add(new int[]{0, 7});
        adjList.get(3).add(new int[]{2, 6});
        adjList.get(4).add(new int[]{1, 3});
        adjList.get(4).add(new int[]{2, 9});

        dijkstra(V, adjList, 0); // Run Dijkstra from source node 0
    }
}
